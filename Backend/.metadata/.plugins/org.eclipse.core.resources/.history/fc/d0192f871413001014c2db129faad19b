package com.loan.security;

import com.loan.service.UserService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;

@Configuration
public class SecurityConfig {

    @Autowired
    private UserService userService;

    @Bean
    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
    	http
        .csrf(csrf -> csrf.disable())
        .authorizeHttpRequests(auth -> auth
            .requestMatchers(
                "/auth/**",                            // User login, registration
                "/loan/apply",                         // Apply for loan
                "/loan/all",                           // Get all loans (admin)
                "/loan/{id}",                          // Get specific loan
                "/loan/approve/**",                    // Approve loan
                "/loan/reject/**",                     // Reject loan
                "/loan/upload/**",                     // Upload documents
                "/loan/download/**",                   // Download documents
                "/loan/schedule/**",                   // All repayments schedule APIs (auto/manual/fetch)
                "/loan/calculate-interest/**",         // Interest calculation
                "/loan/generate/**",                   // (Optional) Old generate path
                "/loan/repayment-schedule/**",         // Save custom repayments schedule
                "/loan/**"                             // Catch-all (fallback for any other /loan/* route)
            ).permitAll()
            .anyRequest().authenticated()
        ).httpBasic();

        return http.build();
    }

    @Bean
    public AuthenticationManager authenticationManager(AuthenticationConfiguration configuration) throws Exception {
        return configuration.getAuthenticationManager();
    }

  
}
