package com.loan.security;

import com.loan.service.UserService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;

@Configuration
public class SecurityConfig {

    @Autowired
    private UserService userService;

    @Bean
    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
        http
            .csrf(csrf -> csrf.disable())
            .authorizeHttpRequests(auth -> auth
            	    .requestMatchers(
            	        "/auth/**",
            	        "/loan/apply",
            	        "/loan/all",
            	        "/loan/{id}",
            	        "/loan/approve/**",
            	        "/loan/reject/**",
            	        "/loan/upload/**",
            	        "/loan/download/**",
            	        "/loan/calculate-interest/**",
            	        "/loan/{loanId}",
            	        "/loan/generate/**",           // ✅ FIXED
            	        "/loan/schedule/**",           // ✅ for GET repayment schedule
            	        "/loan/process-payment",       // ✅ if used later
            	        "/loan/**"                     // ✅ OPTIONAL catch-all under /loan
            	    ).permitAll()
            	    .anyRequest().authenticated()
            	)

            .httpBasic();

        return http.build();
    }

    @Bean
    public AuthenticationManager authenticationManager(AuthenticationConfiguration configuration) throws Exception {
        return configuration.getAuthenticationManager();
    }

  
}
