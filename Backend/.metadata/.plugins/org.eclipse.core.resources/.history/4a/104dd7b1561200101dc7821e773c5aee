package com.loan.controller;

import com.loan.model.LoanApplication;
import com.loan.service.LoanApplicationService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.Resource;
import org.springframework.core.io.UrlResource;
import org.springframework.http.HttpHeaders;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import java.io.IOException;
import java.net.MalformedURLException;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.List;

@RestController
@RequestMapping("/loan")
@CrossOrigin(origins = "http://localhost:3000")
public class LoanApplicationController {

    @Autowired
    private LoanApplicationService loanService;

    @PostMapping("/apply")
    public LoanApplication applyLoan(@RequestBody LoanApplication app) {
        return loanService.submitApplication(app);
    }

    @GetMapping("/all")
    public List<LoanApplication> getAll() {
        return loanService.getAllApplications();
    }

    @GetMapping("/{id}")
    public LoanApplication getById(@PathVariable Long id) {
        return loanService.getApplicationById(id);
    }

    @PutMapping("/approve/{id}")
    public ResponseEntity<LoanApplication> approveLoan(@PathVariable Long id) {
        return ResponseEntity.ok(loanService.approveLoan(id));
    }

    @PutMapping("/reject/{id}")
    public ResponseEntity<LoanApplication> rejectLoan(@PathVariable Long id) {
        return ResponseEntity.ok(loanService.rejectLoan(id));
    }

    @PostMapping("/upload/{id}")
    public ResponseEntity<String> uploadDocument(@PathVariable Long id, @RequestParam("file") MultipartFile file) {
        try {
            String path = loanService.storeDocument(id, file);
            return ResponseEntity.ok("Document uploaded to: " + path);
        } catch (Exception e) {
            return ResponseEntity.badRequest().body("Upload failed: " + e.getMessage());
        }
    }


    @GetMapping("/download/{id}")
    public ResponseEntity<Resource> downloadDocument(@PathVariable Long id) throws IOException {
        LoanApplication app = loanService.getApplicationById(id);

        if (app.getDocumentPath() == null) {
            return ResponseEntity.notFound().build();
        }

        Path path = Paths.get(app.getDocumentPath());
        Resource resource = new UrlResource(path.toUri());

        if (!resource.exists()) {
            return ResponseEntity.notFound().build();
        }

        return ResponseEntity.ok()
                .header(HttpHeaders.CONTENT_DISPOSITION, "attachment; filename=\"" + path.getFileName().toString() + "\"")
                .body(resource);
    }
}
